apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

def static loadFromEnvironment(String key) {
    return System.getenv(key)
}

def static loadFromFile(String key, String value) {
    def properties = new Properties()
    def loadedFile = new File(value)
    if (loadedFile.canRead()) {
        properties.load(new FileInputStream(value))
        return properties[key]
    } else {
        return "INVALID_KEY"
    }
}

def isRunningOnTravis = System.getenv("CI") == "true"

def getGitSha = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 29
    dataBinding {
        enabled = true
    }
    androidExtensions {
        experimental = true
    }
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "fi.kroon.vadret"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 23
        versionName "1.2.7"
        vectorDrawables.useSupportLibrary = true
        flavorDimensions "default"
        testInstrumentationRunner "androidx.top.runner.AndroidJUnitRunner"
        manifestPlaceholders = [FABRIC_API_KEY: loadFromFile("FABRIC_API_KEY", ".env")]
        if (isRunningOnTravis) {
            manifestPlaceholders = [FABRIC_API_KEY: loadFromEnvironment("FABRIC_API_KEY")]
        }
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    signingConfigs {
        release {
            keyAlias
            keyPassword
            storeFile
            storePassword
        }
    }
    if (isRunningOnTravis) {
        /**
         *  This is for travis-ci
         */
        signingConfigs.release.storeFile = file("../.keystore")
        signingConfigs.release.storePassword = loadFromEnvironment("storePassword")
        signingConfigs.release.keyAlias = loadFromEnvironment("keyAlias")
        signingConfigs.release.keyPassword = loadFromEnvironment("keyPassword")
    } else {
        signingConfigs.release.storeFile = file("../.keystore")
        signingConfigs.release.storePassword = loadFromFile("storePassword", "keystore.properties")
        signingConfigs.release.keyAlias = loadFromFile("keyAlias", "keystore.properties")
        signingConfigs.release.keyPassword = loadFromFile("keyPassword", "keystore.properties")
    }
    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
    }
    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_version", "${defaultConfig.versionName}"
        }
        debug {
            ext.alwaysUpdateBuildId = false
            ext.enableCrashlytics = false
            testCoverageEnabled = true
            versionNameSuffix "debug"
            resValue "string", "app_version", "${defaultConfig.versionName}-${versionNameSuffix}-${getGitSha}"
        }
    }
    productFlavors {
        google {
            signingConfig signingConfigs.release
        }
        fdroid {
            ext.enableCrashlytics = false
            signingConfig fdroid.signingConfig
        }
        github {
            signingConfig signingConfigs.release
            ext.enableCrashlytics = false
            versionNameSuffix "signed"
            resValue "string", "app_version", "${defaultConfig.versionName}-${getGitSha}-${versionNameSuffix}"
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations {
    ktlint
}

dependencies {

    def APPCOMPAT_VERSION = "1.1.0"
    def ASSERTJ_VERSION = "3.14.0"
    def COMMONS_CSV_VERSION = "1.7"
    def CONSTRAINT_LAYOUT_VERSION = "1.1.3"
    def CORE_KTX_VERSION = "1.2.0"
    def CRASHLYTICS_VERSION = "2.10.1"
    def DAGGER_VERSION = "2.25.2"
    def FRAGMENT_KTX_VERSION = "1.2.4"
    def JUNIT_VERSION = "4.13"
    def EITHER_VERSION = "1.0.1"
    def KOTLIN_STDLIB_VERSION = "1.3.71"
    def KTLINT_VERSION = "0.36.0"
    def KTX_VERSION = "1.0.0"
    def LEAK_CANARY = "1.6.3"
    def MATERIAL_VERSION = "1.1.0"
    def MOCKITO_CORE_VERSION = "3.1.0"
    def MOSHI_VERSION = "1.9.2"
    def NAVIGATION_VERSION = "2.2.1"
    def OKHTTP_VERSION = "4.4.1"
    def OKIO_VERSION = "2.4.1"
    def OSMDROID_VERSION = "6.1.2"
    def PERMISSIONS_DISPATCHER_VERSION = "4.6.0"
    def PICASSO_VERSION = "2.71828"
    def PREFERENCE_VERSION = "1.1.0"
    def RETROFIT_VERSION = "2.7.2"
    def ROOM_VERSION = "2.2.2"
    def RXANDROID_VERSION = "2.1.1"
    def RXBINDING_VERSION = "3.1.0"
    def RXJAVA_VERSION = "2.2.14"
    def RXKOTLIN_VERSION = "2.4.0"
    def RXK_PREFS_VERSION = "1.2.5"
    def THREETEN_ABP_VERSION = "1.2.1"
    def THREETEN_BP_VERSION = "1.4.0"
    def TIMBER_VERSION = "4.7.1"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android
    implementation "androidx.appcompat:appcompat:${APPCOMPAT_VERSION}"
    implementation "androidx.constraintlayout:constraintlayout:${CONSTRAINT_LAYOUT_VERSION}"
    implementation "androidx.core:core-ktx:${CORE_KTX_VERSION}"
    implementation "androidx.fragment:fragment-ktx:${FRAGMENT_KTX_VERSION}"
    implementation "androidx.legacy:legacy-support-v4:${KTX_VERSION}"
    implementation "androidx.navigation:navigation-fragment-ktx:${NAVIGATION_VERSION}"
    implementation "androidx.navigation:navigation-ui-ktx:${NAVIGATION_VERSION}"
    implementation "androidx.preference:preference:${PREFERENCE_VERSION}"
    implementation "com.google.android.material:material:${MATERIAL_VERSION}"

    // Reactive
    implementation "com.jakewharton.rxbinding3:rxbinding-appcompat:${RXBINDING_VERSION}"
    implementation "com.jakewharton.rxbinding3:rxbinding-material:${RXBINDING_VERSION}"
    implementation "com.jakewharton.rxbinding3:rxbinding-recyclerview:${RXBINDING_VERSION}"
    implementation "com.jakewharton.rxbinding3:rxbinding-swiperefreshlayout:${RXBINDING_VERSION}"
    implementation "com.jakewharton.rxbinding3:rxbinding-viewpager:${RXBINDING_VERSION}"
    implementation "io.reactivex.rxjava2:rxandroid:${RXANDROID_VERSION}"
    implementation "io.reactivex.rxjava2:rxjava:${RXJAVA_VERSION}"
    implementation "io.reactivex.rxjava2:rxkotlin:${RXKOTLIN_VERSION}"

    // Network
    implementation "com.squareup.okhttp3:logging-interceptor:${OKHTTP_VERSION}"
    implementation "com.squareup.okhttp3:okhttp:${OKHTTP_VERSION}"
    implementation "com.squareup.okio:okio:${OKIO_VERSION}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${RETROFIT_VERSION}"
    implementation "com.squareup.retrofit2:converter-moshi:${RETROFIT_VERSION}"
    implementation "com.squareup.retrofit2:retrofit:${RETROFIT_VERSION}"

    // Database
    implementation "androidx.room:room-runtime:${ROOM_VERSION}"
    kapt "androidx.room:room-compiler:${ROOM_VERSION}"
    implementation "androidx.room:room-ktx:${ROOM_VERSION}"
    implementation "androidx.room:room-rxjava2:${ROOM_VERSION}"

    // Serialization
    implementation "com.squareup.moshi:moshi-adapters:${MOSHI_VERSION}"
    implementation "com.squareup.moshi:moshi:${MOSHI_VERSION}"
    implementation "com.squareup.retrofit2:converter-moshi:${RETROFIT_VERSION}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${MOSHI_VERSION}"

    // Dependency Injection
    implementation "com.google.dagger:dagger:${DAGGER_VERSION}"
    kapt "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"

    // Miscellaneous
    implementation "com.afollestad:rxkprefs:${RXK_PREFS_VERSION}"
    implementation "com.squareup.picasso:picasso:${PICASSO_VERSION}"
    implementation "org.apache.commons:commons-csv:${COMMONS_CSV_VERSION}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${KOTLIN_STDLIB_VERSION}"
    implementation "org.osmdroid:osmdroid-android:${OSMDROID_VERSION}"
    implementation "io.github.sphrak:either:${EITHER_VERSION}"
    implementation "org.permissionsdispatcher:permissionsdispatcher:${PERMISSIONS_DISPATCHER_VERSION}"
    kapt "org.permissionsdispatcher:permissionsdispatcher-processor:${PERMISSIONS_DISPATCHER_VERSION}"

    // Datetime
    implementation "com.jakewharton.threetenabp:threetenabp:${THREETEN_ABP_VERSION}"
    testImplementation "org.threeten:threetenbp:${THREETEN_BP_VERSION}"

    // Debugging, Testing, Linting, Analytics
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${LEAK_CANARY}"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:${LEAK_CANARY}"
    googleImplementation("com.crashlytics.sdk.android:crashlytics:${CRASHLYTICS_VERSION}@aar") {
        transitive = true
    }
    implementation "com.jakewharton.timber:timber:${TIMBER_VERSION}"
    ktlint "com.pinterest:ktlint:${KTLINT_VERSION}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"
    testImplementation "junit:junit:${JUNIT_VERSION}"
    testImplementation "org.assertj:assertj-core:${ASSERTJ_VERSION}"
    testImplementation "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"

}

tasks.register("ktlint", JavaExec) {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}

check.dependsOn ktlint

tasks.register("ktlintFormat", JavaExec) {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}
