apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'jacoco'
apply plugin: 'io.fabric'

def static loadFromEnvironment(String key) {
    return System.getenv(key)
}

def static loadFromFile(String key, String file) {
    /**
     *  loads a key from a file and returns
     *  it. Else a empty string is returned.
     */
    def inputFileProperties = new Properties()
    inputFileProperties.load(new FileInputStream(file))
    return inputFileProperties[key]
}

def isRunningOnTravis = System.getenv("CI") == "true"
android {
    compileSdkVersion 28
    dataBinding {
        enabled = true
    }
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "fi.kroon.vadret"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "0.1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.top.runner.AndroidJUnitRunner"
        if (isRunningOnTravis) {
            manifestPlaceholders = [ FABRIC_API_KEY:loadFromEnvironment("FABRIC_API_KEY") ]
        } else {
            manifestPlaceholders = [ FABRIC_API_KEY:loadFromFile("FABRIC_API_KEY", ".env") ]
        }

    }
    signingConfigs {
        release {
            /**
             *  if we are not running on travis, ie
             *  locally we run this instead since
             *  we can utilize a .env file instead.
             */
            /*keyAlias loadFromFile('keyAlias', 'keystore.properties')
            keyPassword loadFromFile('keyPassword', 'keystore.properties')
            storeFile file(loadFromFile('storeFile', 'keystore.properties'))
            storePassword loadFromFile('storePassword', 'keystore.properties')*/
            keyAlias
            keyPassword
            storeFile
            storePassword
        }
    }
    if (isRunningOnTravis) {
        /**
         *  This is for travis-ci
         */
        signingConfigs.release.storeFile = file("../.keystore")
        signingConfigs.release.storePassword = loadFromEnvironment("storePassword")
        signingConfigs.release.keyAlias = loadFromEnvironment("keyAlias")
        signingConfigs.release.keyPassword = loadFromEnvironment("keyPassword")
    } else {
        signingConfigs.release.storeFile = file("../.keystore")
        signingConfigs.release.storePassword = loadFromFile("storePassword", "keystore.properties")
        signingConfigs.release.keyAlias = loadFromFile("keyAlias", "keystore.properties")
        signingConfigs.release.keyPassword = loadFromFile("keyPassword", "keystore.properties")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_version", "${defaultConfig.versionName}"
            signingConfig signingConfigs.release
        }
        debug {
            ext.enableCrashlytics = false // disable on debug
            testCoverageEnabled = true
            versionNameSuffix "-debug"
            resValue "string", "app_version", "${defaultConfig.versionName}${versionNameSuffix}"
        }
    }
    lintOptions {
        abortOnError false
    }
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/reports")
}

configurations {
    ktlint
}

dependencies {

    def RXJAVA_VERSION = "2.2.2"
    def DAGGER_VERSION = "2.17"
    def RETROFIT_VERSION = "2.4.0"
    def MOSHI_VERSION = "1.7.0"
    def KTLINT_VERSION = "0.29.0"
    def KTX_VERSION = "1.0.0"
    def NAVIGATION_VERSION = "1.0.0-alpha07"
    def LEAK_CANARY = "1.6.2"
    def LIFE_CYCLE_VERSION = "2.0.0"
    def OSMDROID_VERSION = "6.0.2"
    def PICASSO_VERSION = "2.71828"
    def PERMISSIONS_DISPATCHER_VERSION = "4.0.0"
    def CRASHLYTICS_VERSION = "2.9.5"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /*androidTestImplementation('androidx.top.espresso:espresso-core:3.1.0-alpha3', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })*/

    // Permissions Dispatcher
    implementation "com.github.hotchemi:permissionsdispatcher:${PERMISSIONS_DISPATCHER_VERSION}"
    kapt "com.github.hotchemi:permissionsdispatcher-processor:${PERMISSIONS_DISPATCHER_VERSION}"

    // Crashlytics
    implementation("com.crashlytics.sdk.android:crashlytics:${CRASHLYTICS_VERSION}@aar") {
        transitive = true;
    }

    // Picasso
    implementation "com.squareup.picasso:picasso:${PICASSO_VERSION}"

    // OSMDroid
    implementation "org.osmdroid:osmdroid-android:${OSMDROID_VERSION}"

    // LifeCycle -- only for the viewmodel
    implementation "androidx.lifecycle:lifecycle-extensions:${LIFE_CYCLE_VERSION}"
    kapt "androidx.lifecycle:lifecycle-compiler:${LIFE_CYCLE_VERSION}"
    testImplementation "android.arch.core:core-testing:${LIFE_CYCLE_VERSION}"

    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${LEAK_CANARY}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:${LEAK_CANARY}"

    // Fragment
    implementation "androidx.fragment:fragment-ktx:${KTX_VERSION}"

    // Navigation
    implementation "android.arch.navigation:navigation-fragment-ktx:${NAVIGATION_VERSION}"
    implementation "android.arch.navigation:navigation-ui-ktx:${NAVIGATION_VERSION}"
    androidTestImplementation "android.arch.navigation:navigation-testing-ktx:1.0.0-alpha06"

    //Retrofit 2
    implementation "com.squareup.retrofit2:retrofit:${RETROFIT_VERSION}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${RETROFIT_VERSION}"
    implementation "com.squareup.retrofit2:converter-moshi:${RETROFIT_VERSION}"

    // Okhttp 3
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'

    // KTX Core
    implementation "androidx.core:core-ktx:${KTX_VERSION}"
    implementation "androidx.appcompat:appcompat:${KTX_VERSION}"
    implementation "androidx.legacy:legacy-support-v4:${KTX_VERSION}"

    // Mockito framework
    testImplementation 'org.mockito:mockito-core:2.23.0'
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "com.google.android.material:material:${KTX_VERSION}"

    // Moshi
    implementation "com.squareup.moshi:moshi:${MOSHI_VERSION}"
    implementation "com.squareup.retrofit2:converter-moshi:${RETROFIT_VERSION}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${MOSHI_VERSION}"

    // Testing
    testImplementation "junit:junit:4.12"
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // Testing
    androidTestImplementation 'com.google.truth:truth:0.42'

    // Dagger2
    implementation "com.google.dagger:dagger:${DAGGER_VERSION}"
    kapt "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"

    // RxJava2 with kotlin bindings
    implementation "io.reactivex.rxjava2:rxjava:${RXJAVA_VERSION}"
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${KOTLIN_VERSION}"
    /*testImplementation "org.jetbrains.kotlin:kotlin-top-junit:${KOTLIN_VERSION}"*/

    // OffsetDateTime backport
    implementation "com.jakewharton.threetenabp:threetenabp:1.1.1"
    testImplementation 'org.threeten:threetenbp:1.3.7'

    // Linting
    ktlint "com.github.shyiko:ktlint:${KTLINT_VERSION}"

    // Timber
    implementation "com.jakewharton.timber:timber:4.7.1"
}

tasks.register("ktlint", JavaExec) {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}

check.dependsOn ktlint

tasks.register("ktlintFormat", JavaExec) {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

tasks.register("jacocoTestReport", JacocoReport) {

    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination "${buildDir}/reports/jacoco/html"
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*'
    ]
    // generated classes
    classDirectories = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )

    // sources
    sourceDirectories = files([
            android.sourceSets.main.java.srcDirs,
            "src/main/java"
    ])
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
}
repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}