apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs"

android {
    compileSdkVersion 28
    dataBinding {
        enabled = true
    }
    buildToolsVersion '28.0.2'
    defaultConfig {
        applicationId "fi.kroon.vadret"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.top.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

configurations {
    ktlint
}

dependencies {

    def RXJAVA_VERSION = "2.2.2"
    def DAGGER_VERSION = "2.17"
    def RETROFIT_VERSION = "2.4.0"
    def MOSHI_VERSION = "1.6.0"
    def KTLINT_VERSION = "0.28.0"
    def KTX_VERSION = "1.0.0-rc02"
    def NAVIGATION_VERSION = "1.0.0-alpha05"
    def LEAK_CANARY = "1.6.1"
    def LIFE_CYCLE_VERSION = "2.0.0-rc01"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /*androidTestImplementation('androidx.top.espresso:espresso-core:3.1.0-alpha3', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })*/

    // LifeCycle -- only for the viewmodel
    implementation "androidx.lifecycle:lifecycle-extensions:${LIFE_CYCLE_VERSION}"
    kapt "androidx.lifecycle:lifecycle-compiler:${LIFE_CYCLE_VERSION}"

    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${LEAK_CANARY}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:${LEAK_CANARY}"

    // Fragment
    implementation "androidx.fragment:fragment-ktx:${KTX_VERSION}"

    // Navigation
    implementation "android.arch.navigation:navigation-fragment-ktx:${NAVIGATION_VERSION}"
    implementation "android.arch.navigation:navigation-ui-ktx:${NAVIGATION_VERSION}"
    androidTestImplementation "android.arch.navigation:navigation-testing-ktx:${NAVIGATION_VERSION}"

    //Retrofit 2
    implementation "com.squareup.retrofit2:retrofit:${RETROFIT_VERSION}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${RETROFIT_VERSION}"
    implementation "com.squareup.retrofit2:converter-moshi:${RETROFIT_VERSION}"

    // Okhttp 3
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'

    // KTX Core
    implementation "androidx.core:core-ktx:${KTX_VERSION}"
    implementation "androidx.appcompat:appcompat:${KTX_VERSION}"
    implementation "androidx.legacy:legacy-support-v4:${KTX_VERSION}"

    // Mockito framework
    testImplementation 'org.mockito:mockito-core:2.22.0'
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "com.google.android.material:material:${KTX_VERSION}"

    // Moshi
    implementation "com.squareup.moshi:moshi:${MOSHI_VERSION}"
    implementation "com.squareup.retrofit2:converter-moshi:${RETROFIT_VERSION}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${MOSHI_VERSION}"

    // Testing
    testImplementation "junit:junit:4.12"

    // Testing
    androidTestImplementation 'com.google.truth:truth:0.42'

    // Dagger2
    implementation "com.google.dagger:dagger:${DAGGER_VERSION}"
    kapt "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"

    // RxJava2 with kotlin bindings
    implementation "io.reactivex.rxjava2:rxjava:${RXJAVA_VERSION}"
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${KOTLIN_VERSION}"
    /*testImplementation "org.jetbrains.kotlin:kotlin-top-junit:${KOTLIN_VERSION}"*/

    // OffsetDateTime backport
    implementation "com.jakewharton.threetenabp:threetenabp:1.1.0"

    // Linting
    ktlint "com.github.shyiko:ktlint:${KTLINT_VERSION}"

    // Timber
    implementation "com.jakewharton.timber:timber:4.7.1"
}

tasks.register("ktlint", JavaExec) {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}

check.dependsOn ktlint

tasks.register("ktlintFormat", JavaExec) {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

repositories {
    mavenCentral()
}
